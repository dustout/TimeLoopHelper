@inject ChallengeService _challengeService
@inject VerifiedTimeLoopService _verifiedTimeLoopService
@inject AppStateService _state

@using System.Threading;


<BSCard>
  <BSCard CardType="CardType.Body">
    <BSCard CardType="CardType.Title">✍ Leave a Message</BSCard>
    <BSCard CardType="CardType.Text">
      Fill out the below form to leave a message for other people stuck in the time loop.
      <hr />
      <BSForm Model="@submission" OnValidSubmit="@ValidSubmit">
        <DataAnnotationsValidator />
        <BSFormGroup>
          <label For="exampleInputEmail1" class="m-0">Time Loop Skill Testing Question</label>
          <div class="card card-body bg-light p-2 mb-1">
            <p class="m-0">


              @if (lastFewChallenges == null)
              {
                <span>Loading...</span>
              }
              else if (lastFewChallenges.Count() >= 3)
              {
            <code class="text-dark">
              @challengeThreeHoursAgo.Value (3 hours ago)
              <br />
              @challengeTwoHoursAgo.Value (2 hours ago)
              <br />
              @challengeOneHourAgo.Value (1 hour ago)
              <br />
              @challengeThisHour.Value (Now)
              <br />
              ???????? (Future)
              <br />
              <span class="text-danger"><strong>Important:</strong> The only way to know the future value is to be a time traveller. This ensures only time travellers can leave messages on this forum.</span>
            </code>

              }
              else
              {
                <span class="text-danger">GENERATE MORE CHALLENGES</span>
              }
            </p>

          </div>
          <BSBasicInput Id="value" InputType="InputType.Text" PlaceHolder="????????" @bind-Value="submission.NextChallenge" ValidateOnChange="true" />
          <small id="emailHelp" class="form-text text-muted">Complete the series above by knowing the future random value.</small>
          <BSFormFeedback For="@(() => submission.NextChallenge)" />
        </BSFormGroup>
        <BSFormGroup>
          <BSLabel For="exampleText">Message</BSLabel>
          <BSBasicInput InputType="InputType.TextArea" Name="text" Id="exampleText" Rows="5" @bind-Value="submission.Message" />
          <small id="emailHelp" class="form-text text-muted">Leave a message for other people who are stuck in your time loop.</small>
        </BSFormGroup>
        <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" IsDisabled="isLoading" IsBlock="true">Submit</BSButton>
      </BSForm>
    </BSCard>
  </BSCard>
</BSCard>

<BSModal @ref="successModal" IsCentered="true">
  <BSModalBody>
    <h3 class="text-success">Success</h3>

    <p class="m-0">
      Your Message has been posted for others in a time loop to view. Best of luck.
    </p>

  </BSModalBody>
  <BSModalFooter>
    <BSButton Color="Color.Primary" IsBlock="true" @onclick="@closeModal">Close</BSButton>
  </BSModalFooter>
</BSModal>

<BSModal @ref="failModal" IsCentered="true">
  <BSModalBody>
    <h3 class="text-danger">Challenge Incorrect</h3>
    <p>
      Sorry <code>@submission.NextChallenge</code> is not the correct value for the next challenge.
    </p>
    <p class="m-0">
      Are you sure you are in a time loop?
    </p>
  </BSModalBody>
  <BSModalFooter>
    <BSButton Color="Color.Danger" IsBlock="true" @onclick="@closeModal">Try Again</BSButton>
  </BSModalFooter>
</BSModal>

@*Modal Code*@
@code {
  BSModal successModal;
  BSModal failModal;

  void closeModal(MouseEventArgs e)
  {
    successModal.Hide();
    failModal.Hide();
  }
}

@code {
  private bool isLoading = false;
  private ChallengeSubmission submission = new ChallengeSubmission();
  private IEnumerable<Challenge> lastFewChallenges = null;
  private Challenge challengeThisHour = null;
  private Challenge challengeOneHourAgo = null;
  private Challenge challengeTwoHoursAgo = null;
  private Challenge challengeThreeHoursAgo = null;

  protected override async Task OnInitializedAsync()
  {
    await UpdateChallengeMessages();

    var timeOfDay = DateTime.Now.TimeOfDay;
    var nextFullHour = TimeSpan.FromHours(Math.Ceiling(timeOfDay.TotalHours));
    var millisecondsToNextHour = (int)((nextFullHour - timeOfDay).TotalMilliseconds) + 1;

    var timer = new Timer(new TimerCallback(_ =>
    {
      InvokeAsync(UpdateChallengeMessages);
    }), null, millisecondsToNextHour, 1000 * 60 * 60);
  }

  protected async Task UpdateChallengeMessages()
  {
    lastFewChallenges = await _challengeService.GetLastChallenges(4);
    var lastFewChallengesLength = lastFewChallenges.Count();

    if (lastFewChallengesLength >= 4)
    {
      challengeThisHour = lastFewChallenges.ElementAt(lastFewChallengesLength - 1);
      challengeOneHourAgo = lastFewChallenges.ElementAt(lastFewChallengesLength - 2);
      challengeTwoHoursAgo = lastFewChallenges.ElementAt(lastFewChallengesLength - 3);
      challengeThreeHoursAgo = lastFewChallenges.ElementAt(lastFewChallengesLength - 4);
    }


    StateHasChanged();
  }

  private async Task ValidSubmit()
  {
    //prevent double clicks
    if (isLoading)
    {
      return;
    }

    //set system into loading mode
    isLoading = true;

    //check if submission is valid
    var nextChallenge = await _challengeService.GetNextChallengeValue();
    if (String.IsNullOrEmpty(submission.NextChallenge) == false
      && nextChallenge.ToUpper() == submission.NextChallenge.ToUpper())
    {

      var challenge = await _challengeService.GetNextChallenge();
      await _verifiedTimeLoopService.RegisterTimeLoop(challenge, submission.Message);

      _state.TimeLoopUserCount++;

      successModal.Show();
    }
    else
    {
      failModal.Show();
    }

    //reset button
    isLoading = false;
  }
}
